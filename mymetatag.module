<?php

use Drupal\Component\Utility\Html;


/**
 * Implements hook_preprocess_html().
 * @param array $variables
 */
function mymetatag_preprocess_html(&$variables) {

  /* @var $mymetatag_storage \Drupal\mymetatag\MymetatagStorageInterface */
  $mymetatag_storage = \Drupal::entityTypeManager()->getStorage('mymetatag');
  /* @var $mymetatag \Drupal\mymetatag\Entity\Mymetatag */
  $mymetatag = $mymetatag_storage->getMymetatagBySourcePath();

  /* @var \Drupal\Core\Utility\Token $token */
  $token = \Drupal::service('token');


  if ($mymetatag) {

    // head_title
    if (!empty($mymetatag->getHeadTitle())) {
      $head_title_text = $mymetatag->getHeadTitle();
      $head_title_text = $token->replace($head_title_text, [], array('clear' => TRUE));
      $head_title_text = preg_replace('/\s{2,}/', ' ', $head_title_text);
      $head_title_text = trim($head_title_text);
      $variables['head_title'] = [];
      $variables['head_title']['title'] = Html::decodeEntities($head_title_text);
    }

    // description
    if (!empty($mymetatag->getDescription())) {
      $description_text = $mymetatag->getDescription();
      $description_text = $token->replace($description_text, [], array('clear' => TRUE));
      $description_text = Html::decodeEntities($description_text);
      $description_text = str_replace('"', "'", $description_text);
      $description_text = preg_replace('/\s{2,}/', ' ', $description_text);
      $description_text = trim($description_text);
      $description = [
        '#tag' => 'meta',
        '#attributes' => [
          'name' => 'description',
          'content' => $description_text,
        ],
      ];
      $variables['#attached']['html_head'][] = [$description, 'description'];
    }

    // noindex
    $noindex = $mymetatag->getNoindex();
    if (!empty($noindex)) {
      $robots_content = '';
      if ($noindex == 1) {
        $robots_content = 'noindex, follow';
      } elseif ($noindex == 2) {
        $robots_content = 'noindex, nofollow';
      }
      if (!empty($robots_content)) {
        $robots = [
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'robots',
            'content' => $robots_content,
          ],
        ];
        $variables['#attached']['html_head'][] = [$robots, 'robots'];
      }
    }

  }


  // Хвост номер страницы
  $page_text = '';
  if (!empty($_GET['page'])) {
    $_GET['page'] = (int)$_GET['page'];
    $n = 1 + $_GET['page'];
    $page_text = ' (страница ' . $n . ')';
  }
  if (!empty($variables['head_title']) && $page_text) {
    if (is_array($variables['head_title'])) {
      $variables['head_title']['title'] .= $page_text;
    } else {
      $variables['head_title'] .= $page_text;
    }
  }
  if (!empty($variables['#attached']['html_head'])) {
    foreach ($variables['#attached']['html_head'] as $key => $value) {
      if (!empty($value[1])) {
        $name = $value[1];
        switch ($name) {
          case 'description':
            if (!empty($variables['#attached']['html_head'][$key][0]['#attributes']['content']) && $page_text) {
              $variables['#attached']['html_head'][$key][0]['#attributes']['content'] .= $page_text;
            }
            break;
        }
      }
    }
  }


}

/**
 * Implements hook_preprocess_block().
 * @param array $variables
 */
function mymetatag_preprocess_block(&$variables) {
  /* TitleResolver не всегда вызывается для блока заголовка, поэтому нужно дублировать здесь */
  if ('page_title_block' == $variables['plugin_id']) {
    /**  @var  \Drupal\mymetatag\MymetatagStorageInterface $mymetatag_storage */
    $mymetatag_storage = \Drupal::entityTypeManager()->getStorage('mymetatag');
    $mymetatag = $mymetatag_storage->getMymetatagBySourcePath();
    if ($mymetatag) {
      if (!empty($mymetatag->getTitleH1())) {
        /* @var \Drupal\Core\Utility\Token $token */
        $token = \Drupal::service('token');
        
        $title_h1_text = $mymetatag->getTitleH1();
        $title_h1_text = $token->replace($title_h1_text, [], array('clear' => TRUE));
        $title_h1_text = preg_replace('/\s{2,}/', ' ', $title_h1_text);
        $title_h1_text = trim($title_h1_text);
        $variables['content']['#title'] = $title_h1_text;
      }
    }
  }

}


/**
 * Implements hook_page_attachments_alter().
 * @param array $page
 */
function mymetatag_page_attachments_alter(array &$page) {
  foreach ($page['#attached']['html_head'] as $key => $value) {
    if (!empty($value[1])) {
      $name = $value[1];
      switch ($name) {
        case 'system_meta_generator':
          unset($page['#attached']['html_head'][$key]);
          break;
      }
    }
  }
}


/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function mymetatag_block_view_mymetatag_seo_text_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  if ($block instanceof \Drupal\mymetatag\Plugin\Block\MymetatagSeoTextBlock) {
    if ($mymetatag = $block->getMymetatag()) {
      $build['#contextual_links']['mymetatag'] = [
        'route_parameters' => ['mymetatag' => $mymetatag->id()],
      ];
    }
  }
}
